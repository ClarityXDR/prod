let s_threshold = 5;  // Reduced from 30 to get results
let l_threshold = 2;  // Reduced from 3 to get results
let aadFunc = (tableName: string) {
    table(tableName)
    | where TimeGenerated >= ago(24h)  // Alert rule time window
    | where OperationName =~ "Sign-in activity"
    // Error codes that we want to look at as they are related to the use of incorrect password.
    | where ResultType in ("50126", "50053", "50055", "50056")
    | extend
        DeviceDetail = todynamic(DeviceDetail),
        Status = todynamic(DeviceDetail),
        LocationDetails = todynamic(LocationDetails)
    | extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser
    | extend
        StatusCode = tostring(Status.errorCode),
        StatusDetails = tostring(Status.additionalDetails)
    | extend LocationString = strcat(tostring(LocationDetails.countryOrRegion), "/", tostring(LocationDetails.state), "/", tostring(LocationDetails.city))
    | summarize
        StartTime = min(TimeGenerated),
        EndTime = max(TimeGenerated),
        LocationCount = dcount(LocationString),
        Location = make_set(LocationString, 100),
        IPAddress = make_set(IPAddress, 100),
        IPAddressCount = dcount(IPAddress),
        AppDisplayName = make_set(AppDisplayName, 100),
        ResultDescription = make_set(ResultDescription, 50),
        Browser = make_set(Browser, 20),
        OS = make_set(OS, 20),
        SigninAttempts = count()
        by UserPrincipalName, Type
    // Setting a generic threshold - Can be different for different environment
    | where SigninAttempts > s_threshold and LocationCount >= l_threshold
    | extend
        AttackDurationHours = datetime_diff('hour', EndTime, StartTime),
        AttackDurationMinutes = datetime_diff('minute', EndTime, StartTime)
    | extend
        AttemptsPerHour = iff(
            AttackDurationMinutes > 0, 
            (SigninAttempts * 60.0) / toreal(AttackDurationMinutes),
            toreal(SigninAttempts)
        )
    | extend
        // Risk scoring based on attack characteristics
        LocationRiskScore = case(
            LocationCount >= 10, "Critical",
            LocationCount >= 5, "High", 
            LocationCount >= 3, "Medium",
            "Low"
        ),
        VolumeRiskScore = case(
            SigninAttempts >= 20, "Critical",
            SigninAttempts >= 10, "High",
            SigninAttempts >= 5, "Medium",
            "Low"
        ),
        SpeedRiskScore = case(
            AttemptsPerHour >= 5.0, "Critical",
            AttemptsPerHour >= 2.0, "High",
            AttemptsPerHour >= 1.0, "Medium",
            "Low"
        )
    | extend
        OverallRiskLevel = case(
            LocationRiskScore == "Critical" or VolumeRiskScore == "Critical" or SpeedRiskScore == "Critical", "Critical",
            LocationRiskScore == "High" or VolumeRiskScore == "High" or SpeedRiskScore == "High", "High",
            "Medium"
        ),
        AttackSummary = strcat(
            "User '", UserPrincipalName, "' experienced ", SigninAttempts, 
            " failed sign-in attempts from ", LocationCount, " locations and ", 
            IPAddressCount, " IP addresses over ", AttackDurationHours, " hours"
        )
    | extend
        Location = tostring(Location),
        IPAddress = tostring(IPAddress),
        AppDisplayName = tostring(AppDisplayName),
        ResultDescription = tostring(ResultDescription),
        Browser = tostring(Browser),
        OS = tostring(OS)
    | extend
        Name = tostring(split(UserPrincipalName, '@', 0)[0]),
        UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])
    // Add alert-specific fields for Sentinel - moved inside function for per-user alerts
    | extend
        AlertName = strcat(UserPrincipalName, ": ", SigninAttempts, " Signin Attempts From ", IPAddressCount, " different IP Addresses in ", AttackDurationHours, " hours"),
        AlertSeverity = case(
            OverallRiskLevel == "Critical", "High",
            OverallRiskLevel == "High", "Medium", 
            "Low"
        ),
        AlertTimeGenerated = now(),
        // Entity mapping for Sentinel
        AccountEntity = UserPrincipalName,
        HostEntity = "",
        IPEntity = IPAddress,
        // Alert description with full context
        AlertDescription = strcat(
            "DISTRIBUTED PASSWORD ATTACK DETECTED: User '", UserPrincipalName, 
            "' experienced ", SigninAttempts, " failed authentication attempts from ", 
            LocationCount, " unique locations and ", IPAddressCount, " different IP addresses over ", 
            AttackDurationHours, " hours (", round(AttemptsPerHour, 2), " attempts/hour). ",
            "Risk Assessment - Location: ", LocationRiskScore, 
            ", Volume: ", VolumeRiskScore, 
            ", Speed: ", SpeedRiskScore, 
            ". Overall Risk: ", OverallRiskLevel
        )
    | project-reorder 
        OverallRiskLevel, AttackSummary, UserPrincipalName, Name, UPNSuffix,
        SigninAttempts, LocationCount, IPAddressCount, AttackDurationHours, AttemptsPerHour,
        LocationRiskScore, VolumeRiskScore, SpeedRiskScore,
        StartTime, EndTime, Location, IPAddress,
        AppDisplayName, ResultDescription, Browser, OS, Type,
        AlertName, AlertSeverity, AlertDescription, AccountEntity, IPEntity
};
let aadSignin = aadFunc("SigninLogs");
let aadNonInt = aadFunc("AADNonInteractiveUserSignInLogs");
union isfuzzy=true aadSignin, aadNonInt