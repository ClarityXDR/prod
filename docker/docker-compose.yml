version: '3.8'

services:
  # Reverse Proxy and SSL Management
  traefik:
    image: traefik:v3.0
    container_name: clarityxdr-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard (optional, remove in production)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
      - ./letsencrypt:/letsencrypt
    command:
      # Enable Docker provider
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      
      # Entry points
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      
      # SSL Configuration
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@clarityxdr.local}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      
      # HTTP to HTTPS redirect
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      
      # Enable dashboard (disable in production)
      - --api.dashboard=true
      - --api.insecure=true
      
      # Logging
      - --log.level=INFO
      - --accesslog=true
    networks:
      - clarityxdr-network
    depends_on:
      - backend
      - frontend

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: clarityxdr-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-clarityxdr}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-clarityxdr}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - clarityxdr-network
    ports:
      - "127.0.0.1:5432:5432" # Only expose to localhost

  # Redis Cache (Optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: clarityxdr-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-clarityxdr_redis_2024}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - clarityxdr-network

  # Go Backend API
  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/dataguys/clarityxdr-backend:latest}
    build:
      context: ../website/backend
      dockerfile: Dockerfile
      target: production
    container_name: clarityxdr-backend
    restart: unless-stopped
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      DB_NAME: ${POSTGRES_DB:-clarityxdr}
      DB_SSL_MODE: ${DB_SSL_MODE:-prefer}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-clarityxdr_redis_2024}
      
      # Security
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:?Encryption key required}
      JWT_SECRET: ${JWT_SECRET:-$(openssl rand -base64 32)}
      
      # Application
      APP_ENV: ${APP_ENV:-production}
      APP_PORT: 8080
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-https://${DOMAIN_NAME:-localhost}}
    volumes:
      - ./repositories:/app/repositories
      - ./uploads:/app/uploads
      - ./logs/backend:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN_NAME:-localhost}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
      # Health check for Traefik
      - "traefik.http.services.backend.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.backend.loadbalancer.healthcheck.interval=30s"
    networks:
      - clarityxdr-network

  # React Frontend
  frontend:
    image: ${FRONTEND_IMAGE:-ghcr.io/dataguys/clarityxdr-frontend:latest}
    build:
      context: ../website/frontend
      dockerfile: Dockerfile
      target: production
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-https://api.${DOMAIN_NAME:-localhost}}
    container_name: clarityxdr-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-https://api.${DOMAIN_NAME:-localhost}}
      NODE_ENV: production
    volumes:
      - ./logs/nginx:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME:-localhost}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - clarityxdr-network

  # Automated Backup Service
  backup:
    image: postgres:15-alpine
    container_name: clarityxdr-backup
    restart: unless-stopped
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *} # 2 AM daily
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
      apk add --no-cache dcron &&
      echo '$${BACKUP_SCHEDULE} /backup.sh' | crontab - &&
      crond -f -l 2
      "
    networks:
      - clarityxdr-network

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: clarityxdr-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - clarityxdr-network
    profiles:
      - monitoring

  # Grafana for visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: clarityxdr-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - clarityxdr-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  clarityxdr-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16